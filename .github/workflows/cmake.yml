name: CMake

on:
  push:
    tags: 
      - "*"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
      
    - name: Installing Prerequisites
      # https://www.rdkit.org/docs/Install.html#installing-prerequisites-from-source
      run: sudo apt-get update && sudo apt-get install -y
        curl
        cmake
        libpython3-dev
        libsqlite3-dev
        libboost-python-dev
        libboost-serialization-dev
        libboost-system-dev
        libboost-iostreams-dev
        libeigen3-dev
        python3-numpy

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE
        -DRDK_BUILD_AVALON_SUPPORT=ON
        -DRDK_BUILD_CAIRO_SUPPORT=ON
        -DRDK_BUILD_INCHI_SUPPORT=ON
        -DRDK_BUILD_PYTHON_WRAPPERS=ON
        -DRDK_INSTALL_INTREE=OFF
        -DPYTHON_EXECUTABLE=/usr/bin/python3
        -DPYTHON_INSTDIR=/usr/local/lib/python3.6/dist-packages

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build .

#     - name: Test
#       working-directory: ${{runner.workspace}}/build
#       shell: bash
#       # Execute tests defined by the CMake configuration.  
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest
#       env:
#         RDBASE: ${{runner.workspace}}

    - name: Create Debian Package
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # https://github.com/rdkit/rdkit/blob/master/Scripts/create_deb_packages.sh
      run: cpack -G DEB && tar -zcvf RDKit-${{runner.os}}.tar.gz *.deb

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{github.ref}}
        release_name: ${{github.ref}}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{steps.create_release.outputs.upload_url}}
        asset_path: ${{runner.workspace}}/build/RDKit-${{runner.os}}.tar.gz
        asset_name: RDKit-${{runner.os}}.tar.gz
#         asset_content_type: application/vnd.debian.binary-package
        asset_content_type: application/gzip
